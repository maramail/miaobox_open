/********************************************************************
	created:	2016/08/18
	created:	18:8:2016   22:15
	filename: 	f:\users\administrator\projects\miaobox\miaobox\miaoboxmvc\assets\scripts\debugwindow\debugwindow.cs
	file path:	f:\users\administrator\projects\miaobox\miaobox\miaoboxmvc\assets\scripts\debugwindow
	file base:	debugwindow
	file ext:	cs
	author:		Zhou Jingren
	
	purpose:	DebugWindow 一些快捷Editor操作
*********************************************************************/
#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;
using Mono.Data.Sqlite;
using System;
using System.IO;
using System.Data;


public class DebugWindow : EditorWindow
{
    private Vector2 mScrollPosition;
    [UnityEditor.MenuItem("ZJRTools/Debug/DebugWindow")]
    static void Init()
    {
        EditorWindow.GetWindow(typeof(DebugWindow)).Show();
    }
    void OnGUI()
    {
        mScrollPosition = GUILayout.BeginScrollView(mScrollPosition, false, true);

        GUILayout.BeginHorizontal();
        if (GUILayout.Button("导出数据库Script", GUILayout.Width(300f)))
        {
            ExportDataBaseScript();
        }
        GUILayout.EndHorizontal();

        GUILayout.EndScrollView();
    }
    private void ExportDataBaseScript ()
    {
        DirectoryInfo scriptDir = new DirectoryInfo (Application.dataPath +"/Scripts/DatabaseExports");
        foreach(FileInfo file in new List<FileInfo>(scriptDir.GetFiles()))
        {
            file.Delete();
        }
        DbAccess dbAccess = new DbAccess(DbAccess.dbStatname);
        string query = "select name from sqlite_master where type='table'";
        SqliteDataReader reader = dbAccess.ExecuteQuery(query);
        while (reader.Read())
        {
            WriteTableClass(reader.GetString(0), dbAccess);
        }
        WriteReadDataBaseCommand(dbAccess);
        dbAccess.CloseSqlConnection();
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
    }
    private void WriteTableClass(string tableName, DbAccess dbAccess)
    {
        string path = Application.dataPath + "/Scripts/DatabaseExports/" + tableName + ".cs";
        try
        {
            FileStream aFile = new FileStream(path, FileMode.Create);
            StreamWriter sw = new StreamWriter(aFile);
            sw.WriteLine("using System.Collections.Generic;");
            sw.WriteLine(string.Format("public class {0}Row", tableName));
            sw.WriteLine("{");
            SqliteDataReader reader = dbAccess.ReadFullTable(tableName);
            for (int i = 0; i < reader.FieldCount; i++)
            {
                sw.WriteLine(string.Format("    public {0} {1};", GetCSharpType(reader.GetDataTypeName(i)), reader.GetName(i)));
            }
            sw.WriteLine("}");
            sw.WriteLine("/// <summary>");
            sw.WriteLine("/// Auto Generated By ZJRTool, Do Not Modify");
            sw.WriteLine("/// </summary>");
            sw.WriteLine(string.Format("public class {0} : DatabaseSerializer", tableName));
            sw.WriteLine("{");
            sw.WriteLine(string.Format("    private static {0} mInstance;", tableName));
            sw.WriteLine(string.Format("    public List<{0}Row> rowList = new List<{0}Row>();", tableName));
            sw.WriteLine(string.Format("    public static {0} GetInstance()", tableName));
            sw.WriteLine("    {");
            sw.WriteLine(string.Format("        return mInstance ?? (mInstance = new {0}());", tableName));
            sw.WriteLine("    }");
            sw.WriteLine(string.Format("    protected override void AddRow(object[] rowInfo)", tableName));
            sw.WriteLine("    {");
            sw.WriteLine(string.Format("        {0}Row row = new {0}Row();", tableName));
            for (int i = 0; i < reader.FieldCount; i++)
            {
                sw.WriteLine(string.Format("        row.{0} = {1}(rowInfo[{2}]);", reader.GetName(i), GetParseMethod(reader.GetDataTypeName(i)), i));
            }
            sw.WriteLine(string.Format("        rowList.Add(row);"));
            sw.WriteLine("    }");
            sw.WriteLine("}");
            sw.Close();
            aFile.Close();
        }
        catch (Exception ex)
        {
            Debug.LogError(ex);
            return;
        }
    }
    private void WriteReadDataBaseCommand(DbAccess dbAccess)
    {
        string path = Application.dataPath + "/Scripts/Framework/Controller/Commands/ReadDataBaseCommand.cs";
        try
        {
            FileStream aFile = new FileStream(path, FileMode.Create);
            StreamWriter sw = new StreamWriter(aFile);
            sw.WriteLine("using UnityEngine;");
            sw.WriteLine("using System.Collections;");
            sw.WriteLine("using PureMVC.Patterns;");
            sw.WriteLine("using PureMVC.Interfaces;");
            sw.WriteLine("/// <summary>");
            sw.WriteLine("/// Auto Generated By ZJRTool, Do Not Modify");
            sw.WriteLine("/// </summary>");
            sw.WriteLine(string.Format("public class ReadDataBaseCommand : SimpleCommand"));
            sw.WriteLine("{");
            sw.WriteLine("    public override void Execute(INotification notification)");
            sw.WriteLine("    {");
			sw.WriteLine(string.Format("        DbAccess dbAccess = new DbAccess(DbAccess.dbStatname);"));
            string query = "select name from sqlite_master where type='table'";
            SqliteDataReader reader = dbAccess.ExecuteQuery(query);
            while (reader.Read())
            {
                sw.WriteLine(string.Format("        {0}.GetInstance().ReadData(dbAccess);", reader.GetString(0)));
            }
            sw.WriteLine(string.Format("        dbAccess.CloseSqlConnection();"));
            sw.WriteLine("    }");
            sw.WriteLine("}");
            sw.Close();
            aFile.Close();
        }
        catch (Exception ex)
        {
            Debug.LogError(ex);
            return;
        }
    }
    private string GetCSharpType(string dbType)
    {
        switch (dbType)
        {
            case "INTEGER":
            case "INT":
                return "int";
            case "TEXT":
            case "STRING":
                return "string";
            case "REAL":
            case "DOUBLE":
            case "FLOAT":
            case "DECIMAL":
                return "float";
            default:
                return "string";
        }
    }
    private string GetParseMethod(string dbType)
    {
        switch (dbType)
        {
            case "INTEGER":
            case "INT":
                return "GetInt";
            case "TEXT":
            case "STRING":
                return "GetString";
            case "REAL":
            case "DOUBLE":
            case "FLOAT":
            case "DECIMAL":
                return "GetFloat";
            default:
                return "GetString";
        }
    }
}
#endif